#!/bin/bash

# Script de d√©ploiement complet du cluster Kubernetes
# Usage: ./deploy.sh

set -e

echo "üöÄ D√©ploiement du cluster Kubernetes sur AWS"
echo "=============================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier Ansible
if ! command -v ansible &> /dev/null; then
    log_error "Ansible n'est pas install√©"
    exit 1
fi

# V√©rifier jq
if ! command -v jq &> /dev/null; then
    log_error "jq n'est pas install√©"
    exit 1
fi

# V√©rifier Terraform
if [ ! -f "../terraform/terraform.tfstate" ]; then
    log_error "Infrastructure Terraform non d√©ploy√©e"
    log_info "Veuillez d'abord ex√©cuter 'terraform apply' dans le dossier terraform/"
    exit 1
fi

log_success "Pr√©requis v√©rifi√©s"

# G√©n√©ration de l'inventaire
log_info "G√©n√©ration de l'inventaire depuis Terraform..."
./generate_inventory.sh

# Test de connectivit√©
log_info "Test de connectivit√© vers les n≈ìuds..."
if ansible all -i inventories/terraform_inventory.yml -m ping --timeout=30; then
    log_success "Connectivit√© OK"
else
    log_error "Probl√®me de connectivit√©"
    log_info "V√©rifiez que les instances sont d√©marr√©es et les cl√©s SSH configur√©es"
    exit 1
fi

# Demande de confirmation
echo ""
read -p "ü§î Voulez-vous d√©ployer le cluster Kubernetes ? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "D√©ploiement annul√©"
    exit 0
fi

# D√©ploiement du cluster
log_info "D√©marrage du d√©ploiement du cluster..."
echo ""

if ansible-playbook -i inventories/terraform_inventory.yml playbooks/site.yml; then
    log_success "üéâ Cluster Kubernetes d√©ploy√© avec succ√®s !"
    
    echo ""
    echo "üìã Informations importantes :"
    echo "=============================="
    
    # R√©cup√©ration de l'IP du master
    MASTER_IP=$(ansible masters -i inventories/terraform_inventory.yml --list-hosts | grep -v "hosts" | xargs | cut -d' ' -f1)
    MASTER_PUBLIC_IP=$(grep -A 1 "$MASTER_IP:" inventories/terraform_inventory.yml | grep "ansible_host:" | awk '{print $2}')
    
    echo "üéõÔ∏è  API Kubernetes : https://$MASTER_PUBLIC_IP:6443"
    echo "üîë Configuration kubectl : /etc/kubernetes/admin.conf"
    echo ""
    echo "üîß Commandes utiles :"
    echo "ssh -i ~/.ssh/id_rsa ubuntu@$MASTER_PUBLIC_IP"
    echo "kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes"
    echo ""
    echo "üìö Documentation compl√®te dans README.md"
    
else
    log_error "√âchec du d√©ploiement"
    echo ""
    echo "üîç Pour d√©boguer :"
    echo "- V√©rifiez les logs Ansible ci-dessus"
    echo "- Testez la connectivit√© : ansible all -i inventories/terraform_inventory.yml -m ping"
    echo "- Consultez les logs syst√®me : journalctl -u kubelet"
    exit 1
fi