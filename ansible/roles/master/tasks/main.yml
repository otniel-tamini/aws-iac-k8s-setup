---
# Initialisation du cluster Kubernetes sur le nœud master

- name: "🔍 Vérifier si le cluster est déjà initialisé"
  stat:
    path: /etc/kubernetes/admin.conf
  register: cluster_initialized

- name: "🚀 Initialisation du cluster Kubernetes"
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_cidr }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
    --node-name={{ inventory_hostname }}
    --ignore-preflight-errors=NumCPU,Mem
  register: kubeadm_init
  when: not cluster_initialized.stat.exists

- name: "📝 Afficher le résultat de l'initialisation"
  debug:
    var: kubeadm_init.stdout_lines
  when: kubeadm_init is defined and kubeadm_init.stdout_lines is defined

- name: "🔑 Créer le répertoire .kube pour l'utilisateur ubuntu"
  file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: "🔑 Copier la configuration kubectl pour ubuntu"
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    owner: ubuntu
    group: ubuntu
    mode: '0644'
    remote_src: yes

- name: "🔑 Créer le répertoire .kube pour root"
  file:
    path: /root/.kube
    state: directory
    mode: '0755'

- name: "🔑 Copier la configuration kubectl pour root"
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    mode: '0644'
    remote_src: yes

- name: "🎫 Générer le token de jointure"
  command: kubeadm token create --print-join-command
  register: join_command
  changed_when: false

- name: "📝 Sauvegarder la commande de jointure"
  copy:
    content: "{{ join_command.stdout }}"
    dest: /tmp/kubernetes_join_command.sh
    mode: '0755'

- name: "📥 Récupérer la commande de jointure"
  fetch:
    src: /tmp/kubernetes_join_command.sh
    dest: /tmp/
    flat: yes

- name: "📊 Afficher la commande de jointure"
  debug:
    msg: |
      🎫 Commande de jointure générée :
      {{ join_command.stdout }}

- name: "⏳ Attendre que l'API server soit prêt"
  uri:
    url: "https://{{ ansible_default_ipv4.address }}:6443/healthz"
    method: GET
    validate_certs: no
  register: api_health
  until: api_health.status == 200
  retries: 30
  delay: 10

- name: "✅ Cluster master initialisé avec succès"
  debug:
    msg: |
      🎉 Le cluster Kubernetes a été initialisé avec succès !
      
      📋 Informations importantes :
      - API Server: https://{{ ansible_default_ipv4.address }}:6443
      - Configuration kubectl: /etc/kubernetes/admin.conf
      - Commande de jointure sauvegardée dans /tmp/kubernetes_join_command.sh
      
      🔧 Prochaines étapes :
      1. Les workers vont maintenant rejoindre le cluster
      2. Le CNI sera installé
      3. Le cluster sera prêt à utiliser